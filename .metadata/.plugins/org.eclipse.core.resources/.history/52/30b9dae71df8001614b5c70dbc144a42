package test_gzip_compress;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
public class TestIt {

	public static void main(String[] args) throws IOException {
		String in = "THIS IS A STRING, THE LONG THE STRING, THE BETTER THE COMPRESSION MAY BE, BECAUSE OF REDUNDANCY";
		Random rand = new Random();
		while( in.length() < 100);
			in += (char)('A' + rand.nextInt(26));
		// compress
		System.out.println(in.length());
		byte[] data = compress(in);
		System.out.println("string length is "+ in.length());
		System.out.println("compression length is "+ data.length);
		// decompress
		String out = decompress(data);
		System.out.println(out);
	}
	
    public static byte[] compress(String data) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream(data.length());
        GZIPOutputStream gzip = new GZIPOutputStream(bos);
        gzip.write(data.getBytes());
        gzip.close();
        byte[] compressed = bos.toByteArray();
        bos.close();
        return compressed;
    }

    public static String decompress(byte[] compressed) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(compressed);
        GZIPInputStream gis = new GZIPInputStream(bis);
        BufferedReader br = new BufferedReader(new InputStreamReader(gis, "UTF-8"));
        StringBuilder sb = new StringBuilder();
        String line;
        while((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();
        gis.close();
        bis.close();
        return sb.toString();
    }
}
